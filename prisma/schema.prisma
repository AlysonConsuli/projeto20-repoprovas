// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @db.Timestamptz()

  @@map("users")
}

model Blacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()

  @@map("blacklist")
}

model Terms {
  id          Int           @id @default(autoincrement())
  number      Int           @unique
  createdAt   DateTime      @default(now()) @db.Timestamptz()
  disciplines Disciplines[]

  @@map("terms")
}

model Disciplines {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  termId              Int
  createdAt           DateTime              @default(now()) @db.Timestamptz()
  term                Terms                 @relation(fields: [termId], references: [id])
  teacherDisciplines TeachersDisciplines[]

  @@map("disciplines")
}

model Teachers {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  createdAt           DateTime              @default(now()) @db.Timestamptz()
  teachersDisciplines TeachersDisciplines[]

  @@map("teachers")
}

model TeachersDisciplines {
  id           Int         @id @default(autoincrement())
  teacherId    Int
  disciplineId Int
  createdAt    DateTime    @default(now()) @db.Timestamptz()
  teacher      Teachers    @relation(fields: [teacherId], references: [id])
  discipline   Disciplines @relation(fields: [disciplineId], references: [id])
  tests        Tests[]

  @@map("teachersDisciplines")
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()
  tests     Tests[]

  @@map("categories")
}

model Tests {
  id                  Int                 @id @default(autoincrement())
  name                String
  pdfUrl              String
  categoryId          Int
  teacherDisciplineId Int
  createdAt           DateTime            @default(now()) @db.Timestamptz()
  category            Categories          @relation(fields: [categoryId], references: [id])
  teacherDiscipline   TeachersDisciplines @relation(fields: [teacherDisciplineId], references: [id])

  @@map("tests")
}
